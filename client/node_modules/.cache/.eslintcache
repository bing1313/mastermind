[{"/Users/bingliang/dev/mastermind_game/client/src/index.js":"1","/Users/bingliang/dev/mastermind_game/client/src/App.js":"2","/Users/bingliang/dev/mastermind_game/client/src/reportWebVitals.js":"3","/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js":"4","/Users/bingliang/dev/mastermind_game/client/src/components/InputRow.js":"5","/Users/bingliang/dev/mastermind_game/client/src/components/ValueBoxes.js":"6","/Users/bingliang/dev/mastermind_game/client/src/components/DisplayRow.js":"7","/Users/bingliang/dev/mastermind_game/client/src/components/GameModes.js":"8"},{"size":492,"mtime":1653424294021,"results":"9","hashOfConfig":"10"},{"size":236,"mtime":1653446799480,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1653196928327,"results":"12","hashOfConfig":"10"},{"size":4776,"mtime":1653548782504,"results":"13","hashOfConfig":"10"},{"size":559,"mtime":1653535486882,"results":"14","hashOfConfig":"10"},{"size":511,"mtime":1653535529825,"results":"15","hashOfConfig":"10"},{"size":709,"mtime":1653548698524,"results":"16","hashOfConfig":"10"},{"size":418,"mtime":1653537550273,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zor5v5",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/bingliang/dev/mastermind_game/client/src/index.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/App.js",["45"],[],"import logo from './logo.svg';\nimport './App.css';\nimport MasterMindGame from './components/MastermindGame';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <MasterMindGame />\n  );\n}\n\nexport default App;\n",[],"/Users/bingliang/dev/mastermind_game/client/src/reportWebVitals.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js",["46","47","48","49","50"],[],"import { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\nimport GameModes from \"./GameModes\";\n\nconst MasterMindGame = () => {\n  const [randomNums, setRandomNums] = useState([2, 3, 1, 4]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  const [turnsLeft, setTurnsLeft] = useState(10);\n  const [difficulty, setDiff] = useState(4);\n  const [didGameStart, setDidGameStart] = useState(false);\n\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    fetch(\n      \"https://www.random.org/integers/?num=\" +\n        difficulty +\n        \"&min=0&max=7&col=1&base=10&format=plain&rnd=new\"\n    )\n      .then((res) => {\n        return res.text();\n      })\n      .then((data) => {\n        var array = data.split(\"\\n\");\n        array.pop();\n        array = array.map((num) => {\n          return parseInt(num);\n        });\n        setRandomNums(array);\n        console.log(data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [difficulty]);\n\n  const isValid = (arr) => {\n    for (let i = 0; i < arr.length; i++) {\n       \n        var currInput = arr[i];\n        \n        if (isNaN(Number(currInput))) {\n          return false;\n        }\n\n        if (currInput.length == 0) {\n            return false;\n        }\n        let num = parseInt(currInput);\n        if (num < 0 || num > 7) {\n          return false;\n        }\n      }\n      return true;\n  }\n\n  const checkRow = (event) => {\n    if (turnsLeft < 1) {\n      alert(\"Game Over. Better Luck next time\");\n    } else {\n      event.preventDefault();\n      //update did game start\n      if (!didGameStart) {\n          setDidGameStart(true);\n      }\n\n      //check all inputs are valid\n      var arr = [];\n      for (var i = 0; i < event.target.length - 1; i++ ) {\n          arr.push(event.target[i].value)\n      }\n \n    if (!isValid(arr)) {\n        return false;\n    }\n\n      setTurnsLeft(turnsLeft - 1);\n      var rowArray = [];\n\n      for (let i = 0; i < event.target.length; i++) {\n        rowArray.push(parseInt(event.target[i].value));\n      }\n\n      rowArray.pop();\n      var inputArr = rowArray.map((str) => {\n        return parseInt(str);\n      });\n      var randomArr = [...randomNums];\n\n      var feedback = [];\n\n      const deleteNumFromSets = (num) => {\n        let a = randomArr.indexOf(num);\n        let b = inputArr.indexOf(num);\n        randomArr.splice(a, 1);\n        inputArr.splice(b, 1);\n      };\n\n      //1. check if numbers are correct and aligned\n      for (let i = 0; i < randomNums.length; i++) {\n        if (rowArray[i] == randomNums[i]) {\n          feedback.push(2);\n          deleteNumFromSets(rowArray[i]);\n        }\n      }\n\n      //2. check if any remaining inputs nums are in the random set\n      inputArr.forEach((num) => {\n        if (randomArr.indexOf(num) != -1) {\n          feedback.push(1);\n          randomArr.splice(randomArr.indexOf(num), 1);\n        }\n      });\n\n      //3. check for any remaining numbers\n      for (let i = feedback.length; i < difficulty; i++) {\n        feedback.push(0);\n      }\n      //check if input is correct\n      if (\n        feedback.every((num) => {\n          return num == 2;\n        })\n      ) {\n        setDidWin(true);\n        if (alert(\"You Won!\")) {\n        } else window.location.reload();\n        setDidWin(false);\n        return;\n      }\n      //increment row number\n      setRowsNum((prevCount) => {\n        return prevCount + 1;\n      });\n\n      //2. Update the grid\n      setRows([\n        ...rows,\n        { row: rowsNum, nums: rowArray, check: feedback.sort().reverse() },\n      ]);\n    }\n  };\n\n  const changeMode = (e) => {\n      if (!didGameStart) {\n        switch (e.target.value) {\n            case \"hard\":\n              setDiff(6);\n              break;\n            default:\n              setDiff(4);\n          }\n      }\n  };\n\n  return (\n    <section>\n      <h2>MasterMind Game</h2>\n      <div className={classes.box}>\n      <div className={classes.game}>\n        {<p>{turnsLeft} turns remaining</p>}\n        <div className={classes.guessGrid}>\n          {rows.map((row) => {\n            return (\n              <DisplayRow\n                key={row.row}\n                values={row.nums}\n                feedback={row.check}\n                numInputs={difficulty}\n              />\n            );\n          })}\n        </div>\n        \n        {!didGameStart && <GameModes changeMode={changeMode} />}\n\n        <InputRow rowId=\"1\" checkRow={checkRow} level={difficulty} />\n        <p>Inputs should be only numbers from 0-7</p>\n      </div>\n      </div>\n      \n    </section>\n  );\n};\n\nexport default MasterMindGame;\n","/Users/bingliang/dev/mastermind_game/client/src/components/InputRow.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/components/ValueBoxes.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/components/DisplayRow.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/components/GameModes.js",[],[],{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":11,"column":10,"nodeType":"53","messageId":"54","endLine":11,"endColumn":16},{"ruleId":"56","severity":1,"message":"57","line":49,"column":30,"nodeType":"58","messageId":"59","endLine":49,"endColumn":32},{"ruleId":"56","severity":1,"message":"57","line":104,"column":25,"nodeType":"58","messageId":"59","endLine":104,"endColumn":27},{"ruleId":"56","severity":1,"message":"60","line":112,"column":36,"nodeType":"58","messageId":"59","endLine":112,"endColumn":38},{"ruleId":"56","severity":1,"message":"57","line":125,"column":22,"nodeType":"58","messageId":"59","endLine":125,"endColumn":24},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'didWin' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]