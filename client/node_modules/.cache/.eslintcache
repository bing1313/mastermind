[{"/Users/bingliang/dev/mastermind_game/client/src/index.js":"1","/Users/bingliang/dev/mastermind_game/client/src/App.js":"2","/Users/bingliang/dev/mastermind_game/client/src/reportWebVitals.js":"3","/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js":"4","/Users/bingliang/dev/mastermind_game/client/src/components/InputRow.js":"5","/Users/bingliang/dev/mastermind_game/client/src/components/ValueBoxes.js":"6","/Users/bingliang/dev/mastermind_game/client/src/components/DisplayRow.js":"7"},{"size":492,"mtime":1653424294021,"results":"8","hashOfConfig":"9"},{"size":236,"mtime":1653446799480,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1653196928327,"results":"11","hashOfConfig":"9"},{"size":4219,"mtime":1653530859017,"results":"12","hashOfConfig":"9"},{"size":522,"mtime":1653457315032,"results":"13","hashOfConfig":"9"},{"size":494,"mtime":1653520739850,"results":"14","hashOfConfig":"9"},{"size":748,"mtime":1653530197900,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zor5v5",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/bingliang/dev/mastermind_game/client/src/index.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/App.js",["41"],[],"import logo from './logo.svg';\nimport './App.css';\nimport MasterMindGame from './components/MastermindGame';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <MasterMindGame />\n  );\n}\n\nexport default App;\n",[],"/Users/bingliang/dev/mastermind_game/client/src/reportWebVitals.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js",["42","43","44","45","46"],[],"import { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\n\nconst MasterMindGame = () => {\n  const [randomNums, setRandomNums] = useState([2, 3, 1, 4]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  const [turnsLeft, setTurnsLeft] = useState(10);\n  const [difficulty, setDiff] = useState(4);\n\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    console.log(\"use effect\");\n    \n    fetch(\n      \"https://www.random.org/integers/?num=\"+ difficulty +\"4&min=0&max=7&col=1&base=10&format=plain&rnd=new\"\n    )\n      .then((res) => {\n        return res.text();\n      })\n      .then((data) => {\n        console.log(data);\n        var array = data.split(\"\\n\");\n        array.pop();\n        array = array.map((num) => {\n          return parseInt(num);\n        });\n        setRandomNums(array);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [difficulty]);\n\n  const isValidInput = (inputs) => {\n    console.log(\"inputs\" + inputs);\n    for (let i = 0; i < inputs.length; i++) {\n      var currInput = inputs[i].value;\n      console.log(\"inputVal\" + currInput);\n      if (isNaN(currInput) || isNaN(Number(currInput))) {\n        console.log(\"isnan or not a num\");\n        return false;\n      }\n      let num = parseInt(currInput);\n      if (num < 0 || num > 7) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const checkRow = (event) => {\n    if (turnsLeft < 1) {\n      alert(\"Game Over. Better Luck next time\");\n    } else {\n      event.preventDefault();\n      //check all inputs are valid\n      if (!isValidInput(event.target)) {\n        return;\n      }\n\n      setTurnsLeft(turnsLeft - 1);\n      var rowArray = [];\n\n      for (let i = 0; i < event.target.length; i++) {\n        rowArray.push(parseInt(event.target[i].value));\n      }\n\n      rowArray.pop();\n      var inputArr = rowArray.map((str) => {\n        return parseInt(str);\n      });\n      var randomArr = [...randomNums];\n\n      var feedback = [];\n\n      const deleteNumFromSets = (num) => {\n        let a = randomArr.indexOf(num);\n        let b = inputArr.indexOf(num);\n        randomArr.splice(a, 1);\n        inputArr.splice(b, 1);\n      };\n\n      //1. check if numbers are correct and aligned\n      for (let i = 0; i < randomNums.length; i++) {\n        if (rowArray[i] == randomNums[i]) {\n          feedback.push(2);\n          deleteNumFromSets(rowArray[i]);\n        }\n      }\n\n      for (let i = 0; i < randomArr.length; i++) {\n        console.log(typeof randomArr[i]);\n      }\n      //2. check if any remaining inputs nums are in the random set\n      inputArr.forEach((num) => {\n        if (randomArr.indexOf(num) != -1) {\n          feedback.push(1);\n          randomArr.splice(randomArr.indexOf(num), 1);\n        }\n      });\n\n      console.log(\"feedback after 2: \" + feedback);\n      for (let i = feedback.length; i < 4; i++) {\n        feedback.push(0);\n      }\n      //check if input is correct\n      if (\n        feedback.every((num) => {\n          return num == 2;\n        })\n      ) {\n        setDidWin(true);\n        if (alert(\"You Won!\")) {\n        } else window.location.reload();\n        setDidWin(false);\n        return;\n      }\n      //increment row number\n      setRowsNum((prevCount) => {\n        return prevCount + 1;\n      });\n\n      //2. Update the grid\n      setRows([\n        ...rows,\n        { row: rowsNum, nums: rowArray, check: feedback.sort().reverse() },\n      ]);\n    }\n  };\n\n  return (\n    <section>\n      <h2>MasterMind Game</h2>\n      <div className={classes.game}>\n        {<p>{turnsLeft} turns remaining</p>}\n        <div className={classes.guessGrid}>\n          {rows.map((row) => {\n            return (\n              <DisplayRow\n                key={row.row}\n                values={row.nums}\n                feedback={row.check}\n                numInputs={randomNums.count}\n              />\n            );\n          })}\n        </div>\n        <InputRow rowId=\"1\" checkRow={checkRow} level={difficulty} />\n      </div>\n    </section>\n  );\n};\n\nexport default MasterMindGame;\n","/Users/bingliang/dev/mastermind_game/client/src/components/InputRow.js",[],[],"/Users/bingliang/dev/mastermind_game/client/src/components/ValueBoxes.js",["47"],[],"import classes from \"./ValueBoxes.module.css\";\n\nconst ValueBoxes = (props) => {\n  var isMutable = props.readOnly;\n  let arrNum = props.level\n  var values = props.values ? props.values : Array(4).fill(\"\");\n  return (\n    <div className={classes.box}>\n        {values.map((val) => {\n            return (\n            <input type=\"text\" key={Math.random()} readOnly={isMutable} defaultValue={val} className={classes.input}/>\n            )\n        })}\n    </div>\n  );\n};\n\nexport default ValueBoxes;\n","/Users/bingliang/dev/mastermind_game/client/src/components/DisplayRow.js",[],[],{"ruleId":"48","severity":1,"message":"49","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":12},{"ruleId":"48","severity":1,"message":"52","line":10,"column":10,"nodeType":"50","messageId":"51","endLine":10,"endColumn":16},{"ruleId":"48","severity":1,"message":"53","line":12,"column":22,"nodeType":"50","messageId":"51","endLine":12,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":89,"column":25,"nodeType":"56","messageId":"57","endLine":89,"endColumn":27},{"ruleId":"54","severity":1,"message":"58","line":100,"column":36,"nodeType":"56","messageId":"57","endLine":100,"endColumn":38},{"ruleId":"54","severity":1,"message":"55","line":113,"column":22,"nodeType":"56","messageId":"57","endLine":113,"endColumn":24},{"ruleId":"48","severity":1,"message":"59","line":5,"column":7,"nodeType":"50","messageId":"51","endLine":5,"endColumn":13},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'didWin' is assigned a value but never used.","'setDiff' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'arrNum' is assigned a value but never used."]