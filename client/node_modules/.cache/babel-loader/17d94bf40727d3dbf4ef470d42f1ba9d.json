{"ast":null,"code":"var _jsxFileName = \"/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MasterMindGame = () => {\n  _s();\n\n  const [randomNums, setRandomNums] = useState([3, 3, 4, 7]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false); //   useEffect(() => {\n  //     // //1. retrieve random numbers from api\n  //     fetch(\n  //       \"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\"\n  //     )\n  //       .then((res) => {\n  //         return res.text();\n  //       })\n  //       .then((data) => {\n  //         console.log(data);\n  //         var array = data.split(\"\\n\");\n  //         array.pop();\n  //         array.map((num) => {\n  //           return parseInt(num);\n  //         });\n  //         setRandomNums(array);\n  //       })\n  //       .catch((error) => {\n  //         console.log(error);\n  //       });\n  //   }, []);\n\n  const checkRow = event => {\n    event.preventDefault();\n    var rowArray = [...event.target].map(input => {\n      return input.value;\n    });\n    rowArray.pop(); //console.log(rowArray)\n\n    var randomArr = [...randomNums];\n    var feedback = [];\n    console.log(\"input set\" + rowArray);\n    console.log(\"randomArr\" + randomArr);\n\n    const deleteNumFromSets = num => {\n      randomArr.splice(randomArr.indexOf(num), 1);\n      rowArray.splice(rowArray.indexOf(num), 1);\n    }; //1. check if numbers are correct and aligned\n\n\n    for (let i = 0; i < rowArray.length; i++) {\n      if (rowArray[i] == randomArr[i]) {\n        feedback.push(2);\n        deleteNumFromSets(rowArray[i]);\n      }\n    }\n\n    console.log(\"feedback after 1: \" + feedback); //2. check if any remaining inputs nums are in the random set\n\n    rowArray.forEach(num => {\n      if (randomArr.has(num)) {\n        feedback.push(1);\n        deleteNumFromSets(num);\n      }\n    });\n    console.log(\"feedback after 2: \" + feedback);\n\n    for (let i = feedback.length; i < 4; i++) {\n      feedback.push(0);\n    } //check if input is correct\n\n\n    if (feedback.every(num => {\n      return num == 2;\n    })) {\n      setDidWin(true);\n    } //increment row number\n\n\n    setRowsNum(prevCount => {\n      return prevCount + 1;\n    }); //2. Update the grid\n\n    setRows([...rows, {\n      row: rowsNum,\n      nums: rowArray,\n      check: feedback.sort().reverse()\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MasterMind Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.game,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.guessGrid,\n        children: rows.map(row => {\n          console.log(row.nums);\n          return /*#__PURE__*/_jsxDEV(DisplayRow, {\n            values: row.nums,\n            feedback: row.check\n          }, row.row, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputRow, {\n        rowId: \"1\",\n        checkRow: checkRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), didWin && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"you won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MasterMindGame, \"gZWw6Ar0zfXTmZgK6eVi68WB2kQ=\");\n\n_c = MasterMindGame;\nexport default MasterMindGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MasterMindGame\");","map":{"version":3,"names":["useState","useEffect","classes","InputRow","DisplayRow","MasterMindGame","randomNums","setRandomNums","rows","setRows","rowsNum","setRowsNum","didWin","setDidWin","checkRow","event","preventDefault","rowArray","target","map","input","value","pop","randomArr","feedback","console","log","deleteNumFromSets","num","splice","indexOf","i","length","push","forEach","has","every","prevCount","row","nums","check","sort","reverse","game","guessGrid"],"sources":["/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\n\nconst MasterMindGame = () => {\n  const [randomNums, setRandomNums] = useState([3, 3, 4, 7]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n\n//   useEffect(() => {\n//     // //1. retrieve random numbers from api\n//     fetch(\n//       \"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\"\n//     )\n//       .then((res) => {\n//         return res.text();\n//       })\n//       .then((data) => {\n//         console.log(data);\n//         var array = data.split(\"\\n\");\n//         array.pop();\n//         array.map((num) => {\n//           return parseInt(num);\n//         });\n//         setRandomNums(array);\n//       })\n//       .catch((error) => {\n//         console.log(error);\n//       });\n//   }, []);\n\n  const checkRow = (event) => {\n    event.preventDefault();\n    var rowArray = [...event.target].map((input) => {\n      return input.value;\n    });\n    rowArray.pop();\n    //console.log(rowArray)\n    var randomArr = [...randomNums];\n    var feedback = [];\n    console.log(\"input set\" + rowArray);\n    console.log(\"randomArr\" + randomArr);\n\n    const deleteNumFromSets = (num) => {\n      randomArr.splice(randomArr.indexOf(num), 1);\n      rowArray.splice(rowArray.indexOf(num), 1);\n    };\n\n    //1. check if numbers are correct and aligned\n    for (let i = 0; i < rowArray.length; i++) {\n      if (rowArray[i] == randomArr[i]) {\n        feedback.push(2);\n        deleteNumFromSets(rowArray[i]);\n      }\n    }\n    console.log(\"feedback after 1: \" + feedback);\n    //2. check if any remaining inputs nums are in the random set\n    rowArray.forEach((num) => {\n      if (randomArr.has(num)) {\n        feedback.push(1);\n        deleteNumFromSets(num);\n      }\n    });\n\n    console.log(\"feedback after 2: \" + feedback);\n    for (let i = feedback.length; i < 4; i++) {\n      feedback.push(0);\n    }\n    //check if input is correct\n    if (\n      feedback.every((num) => {\n        return num == 2;\n      })\n    ) {\n      setDidWin(true);\n    }\n    //increment row number\n    setRowsNum((prevCount) => {\n      return prevCount + 1;\n    });\n\n    //2. Update the grid\n    setRows([\n      ...rows,\n      { row: rowsNum, nums: rowArray, check: feedback.sort().reverse() },\n    ]);\n  };\n\n  return (\n    <section>\n      <h2>MasterMind Game</h2>\n      <div className={classes.game}>\n        <div className={classes.guessGrid}>\n          {rows.map((row) => {\n            console.log(row.nums);\n            return (\n              <DisplayRow\n                key={row.row}\n                values={row.nums}\n                feedback={row.check}\n              />\n            );\n          })}\n        </div>\n        <InputRow rowId=\"1\" checkRow={checkRow} />\n        {didWin && <p>you won!</p>}\n      </div>\n    </section>\n  );\n};\n\nexport default MasterMindGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}