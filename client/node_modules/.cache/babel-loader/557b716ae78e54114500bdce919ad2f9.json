{"ast":null,"code":"var _jsxFileName = \"/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport ValueBoxes from \"./ValueBoxes\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MasterMindGame = () => {\n  _s();\n\n  var _ref;\n\n  const [randomNums, setRandomNums] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    fetch(\"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\").then(res => {\n      return res.text();\n    }).then(data => {\n      console.log(data);\n      var array = data.split(\"\\n\");\n      array.pop();\n      array.map(num => {\n        return parseInt(num);\n      });\n      setRandomNums(array);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  const checkRow = event => {\n    event.preventDefault();\n    var rowArray = [...event.target].map(input => {\n      return input.value;\n    });\n    rowArray.pop(); //console.log(rowArray)\n\n    var inputSet = new Set(rowArray);\n    var randomSet = new Set(randomNums);\n    var feedback = [];\n    console.log(\"input set\" + inputSet);\n    console.log(\"randomset\" + randomSet);\n\n    const deleteNumFromSets = num => {\n      randomSet.delete(num);\n      inputSet.delete(num);\n    }; //1. check if numbers are correct and aligned\n\n\n    for (let i = 0; i < rowArray.length; i++) {\n      if (rowArray[i] == randomNums[i]) {\n        feedback.push(2);\n        deleteNumFromSets(rowArray[i]);\n      }\n    }\n\n    console.log(\"feedback after 1: \" + feedback); //2. check if any remaining inputs nums are in the random set\n\n    inputSet.forEach(num => {\n      if (randomSet.has(num)) {\n        feedback.push(1);\n        deleteNumFromSets(num);\n      }\n    });\n    console.log(\"feedback after 2: \" + feedback);\n\n    for (let i = feedback.length; i < 4; i++) {\n      feedback.push(0);\n    } //check if input is correct\n\n\n    if (feedback.every(num => {\n      return num == 2;\n    })) {\n      setDidWin(true);\n    } //increment row number \n\n\n    setRows(prevCount => {\n      return prevCount + 1;\n    }); //2. Update the grid\n\n    setRows([...rows, {\n      row: rowsNum,\n      nums: rowArray,\n      check: feedback.sort().reverse()\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [rows.map(row => {\n      console.log(row.nums);\n      return /*#__PURE__*/_jsxDEV(DisplayRow, {\n        values: row.nums,\n        feedback: row.check\n      }, row.row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(InputRow, {\n      rowId: \"1\",\n      checkRow: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), (_ref = didWin == true) !== null && _ref !== void 0 ? _ref : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"you won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 12\n  }, this);\n};\n\n_s(MasterMindGame, \"lgPCiFZcTtYdihsC9HPxhcSUXbM=\");\n\n_c = MasterMindGame;\nexport default MasterMindGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MasterMindGame\");","map":{"version":3,"names":["useState","useEffect","ValueBoxes","InputRow","DisplayRow","MasterMindGame","randomNums","setRandomNums","rows","setRows","rowsNum","setRowsNum","didWin","setDidWin","fetch","then","res","text","data","console","log","array","split","pop","map","num","parseInt","catch","error","checkRow","event","preventDefault","rowArray","target","input","value","inputSet","Set","randomSet","feedback","deleteNumFromSets","delete","i","length","push","forEach","has","every","prevCount","row","nums","check","sort","reverse"],"sources":["/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport ValueBoxes from \"./ValueBoxes\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\n\nconst MasterMindGame = () => {\n    const [randomNums, setRandomNums] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [rowsNum, setRowsNum] = useState(0);\n    const [didWin, setDidWin] = useState(false);\n\n    useEffect(() => {\n        // //1. retrieve random numbers from api\n        fetch(\"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\")\n        .then((res) => {\n            return res.text()\n        })\n        .then((data) => {\n            console.log(data);\n            var array = data.split(\"\\n\")\n            array.pop()\n            array.map((num) => {\n                return parseInt(num)\n            })\n            setRandomNums(array);\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }, [])\n\n    const checkRow = (event) => {\n        event.preventDefault();\n        var rowArray = [...event.target].map((input) => { return input.value });\n        rowArray.pop()\n        //console.log(rowArray)\n        var inputSet = new Set(rowArray);\n        var randomSet = new Set(randomNums);\n        var feedback = [];\n        console.log(\"input set\" + inputSet)\n        console.log(\"randomset\" + randomSet)\n\n        const deleteNumFromSets = (num) => {\n            randomSet.delete(num);\n            inputSet.delete(num)\n        }\n\n        //1. check if numbers are correct and aligned\n        for (let i = 0; i < rowArray.length; i++) {\n            if (rowArray[i] == randomNums[i]) {\n                feedback.push(2);\n                deleteNumFromSets(rowArray[i]); \n            }\n        }\n        console.log(\"feedback after 1: \" + feedback)\n        //2. check if any remaining inputs nums are in the random set\n       inputSet.forEach((num) => {\n           if (randomSet.has(num)) {\n               feedback.push(1);\n               deleteNumFromSets(num);\n           }\n       })\n\n        console.log(\"feedback after 2: \" + feedback)\n        for (let i = feedback.length; i < 4; i++) {\n            feedback.push(0)\n        }\n        //check if input is correct\n        if (feedback.every((num) => { return num == 2 })) {\n            setDidWin(true);\n        }\n        //increment row number \n        setRows((prevCount) => {\n            return prevCount + 1;\n        })\n\n        //2. Update the grid\n        setRows([...rows, { row: rowsNum, nums: rowArray, check: feedback.sort().reverse()}])\n        \n    }\n\n    return <section>\n        {rows.map((row) => {\n            console.log(row.nums);\n            return( \n            <DisplayRow key={row.row} values={row.nums} feedback={row.check}/>\n            )\n        })}\n        <InputRow rowId=\"1\" checkRow={checkRow} />\n        {didWin == true ?? <p>you won!</p>}\n        </section>\n    \n}\n\nexport default MasterMindGame; "],"mappings":"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"},"metadata":{},"sourceType":"module"}