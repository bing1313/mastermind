{"ast":null,"code":"var _jsxFileName = \"/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MasterMindGame = () => {\n  _s();\n\n  const [randomNums, setRandomNums] = useState([2, 3, 1, 4]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  const [turnsLeft, setTurnsLeft] = useState(10);\n  const [diff, setDiff] = useState(4);\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    console.log(\"use effect\");\n    fetch(\"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\").then(res => {\n      return res.text();\n    }).then(data => {\n      console.log(data);\n      var array = data.split(\"\\n\");\n      array.pop();\n      array = array.map(num => {\n        return parseInt(num);\n      });\n      setRandomNums(array);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  const checkRow = event => {\n    console.log(\"\\n\");\n    console.log(\"this is the row: \" + rowsNum);\n\n    if (turnsLeft < 1) {\n      alert(\"Game Over. Better Luck next time\");\n    } else {\n      event.preventDefault();\n      setTurnsLeft(turnsLeft - 1);\n      var rowArray = [];\n\n      for (let i = 0; i < event.target.length; i++) {\n        rowArray.push(parseInt(event.target[i].value));\n      }\n\n      rowArray.pop();\n      var inputArr = rowArray.map(str => {\n        return parseInt(str);\n      });\n      var randomArr = [...randomNums];\n      var feedback = [];\n\n      const deleteNumFromSets = num => {\n        let a = randomArr.indexOf(num);\n        let b = inputArr.indexOf(num);\n        randomArr.splice(a, 1);\n        inputArr.splice(b, 1);\n      }; //1. check if numbers are correct and aligned\n\n\n      for (let i = 0; i < randomNums.length; i++) {\n        if (rowArray[i] == randomNums[i]) {\n          feedback.push(2);\n          deleteNumFromSets(rowArray[i]);\n        }\n      }\n\n      console.log(\"after 1:\" + feedback);\n      console.log(\"inputArr: \" + inputArr);\n      console.log(\"randomArr: \" + randomArr);\n      console.log(\"checking randomARr\");\n\n      for (let i = 0; i < randomArr.length; i++) {\n        console.log(typeof randomArr[i]);\n      } //2. check if any remaining inputs nums are in the random set\n\n\n      inputArr.forEach(num => {\n        console.log(\"type\" + typeof num);\n\n        if (randomArr.indexOf(num) != -1) {\n          feedback.push(1);\n          console.log(\"index\" + randomArr.indexOf(num));\n          randomArr.splice(randomArr.indexOf(num), 1);\n        }\n      });\n      console.log(\"feedback after 2: \" + feedback);\n      console.log(\"inputArr: \" + inputArr);\n      console.log(\"randomArr: \" + randomArr);\n\n      for (let i = feedback.length; i < 4; i++) {\n        feedback.push(0);\n      } //check if input is correct\n\n\n      if (feedback.every(num => {\n        return num == 2;\n      })) {\n        setDidWin(true); //alert(\"you won!\")\n\n        if (alert('You Won!')) {} else window.location.reload();\n\n        return;\n      } //increment row number\n\n\n      setRowsNum(prevCount => {\n        return prevCount + 1;\n      }); //2. Update the grid\n\n      setRows([...rows, {\n        row: rowsNum,\n        nums: rowArray,\n        check: feedback.sort().reverse()\n      }]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MasterMind Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.game,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [turnsLeft, \" turns remaining\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.guessGrid,\n        children: rows.map(row => {\n          return /*#__PURE__*/_jsxDEV(DisplayRow, {\n            values: row.nums,\n            feedback: row.check\n          }, row.row, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputRow, {\n        rowId: \"1\",\n        checkRow: checkRow,\n        level: diff\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MasterMindGame, \"fQUQmMDPQwtRRhfQ9zz+eRXGCo8=\");\n\n_c = MasterMindGame;\nexport default MasterMindGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MasterMindGame\");","map":{"version":3,"names":["useState","useEffect","classes","InputRow","DisplayRow","MasterMindGame","randomNums","setRandomNums","rows","setRows","rowsNum","setRowsNum","didWin","setDidWin","turnsLeft","setTurnsLeft","diff","setDiff","console","log","fetch","then","res","text","data","array","split","pop","map","num","parseInt","catch","error","checkRow","event","alert","preventDefault","rowArray","i","target","length","push","value","inputArr","str","randomArr","feedback","deleteNumFromSets","a","indexOf","b","splice","forEach","every","window","location","reload","prevCount","row","nums","check","sort","reverse","game","guessGrid"],"sources":["/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\n\nconst MasterMindGame = () => {\n  const [randomNums, setRandomNums] = useState([2,3,1,4]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  const [turnsLeft, setTurnsLeft] = useState(10);\n  const [diff, setDiff] = useState(4);\n\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    console.log(\"use effect\");\n    fetch(\n      \"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\"\n    )\n      .then((res) => {\n        return res.text();\n      })\n      .then((data) => {\n        console.log(data);\n        var array = data.split(\"\\n\");\n        array.pop();\n        array = array.map((num) => {\n          return parseInt(num);\n        });\n        setRandomNums(array);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const checkRow = (event) => {\n      console.log(\"\\n\")\n      console.log(\"this is the row: \" + rowsNum);\n    if (turnsLeft < 1) {\n      alert(\"Game Over. Better Luck next time\");\n    } else {\n      event.preventDefault();\n\n      setTurnsLeft(turnsLeft - 1);\n      var rowArray = [];\n      for (let i = 0; i < event.target.length; i++) {\n        rowArray.push(parseInt(event.target[i].value));\n      }\n\n      rowArray.pop();\n      var inputArr = rowArray.map((str) => {\n        return parseInt(str);\n      });\n      var randomArr = [...randomNums];\n\n      var feedback = [];\n\n      const deleteNumFromSets = (num) => {\n        let a = randomArr.indexOf(num);\n        let b = inputArr.indexOf(num);\n        randomArr.splice(a, 1);\n        inputArr.splice(b, 1);\n      };\n\n      //1. check if numbers are correct and aligned\n      for (let i = 0; i < randomNums.length; i++) {\n        if (rowArray[i] == randomNums[i]) {\n          feedback.push(2);\n          deleteNumFromSets(rowArray[i]);\n        }\n      }\n      console.log(\"after 1:\"+ feedback)\n      console.log(\"inputArr: \" + inputArr)\n      console.log(\"randomArr: \" + randomArr)\n\n      console.log(\"checking randomARr\")\n      for (let i = 0; i < randomArr.length; i++) {\n          console.log(typeof(randomArr[i]))\n      }\n      //2. check if any remaining inputs nums are in the random set\n      inputArr.forEach(num => {\n          console.log(\"type\" + typeof(num))\n        if (randomArr.indexOf(num) != -1) {\n          feedback.push(1);\n          console.log(\"index\" + randomArr.indexOf(num));\n          randomArr.splice(randomArr.indexOf(num), 1);\n        }\n      });\n\n      console.log(\"feedback after 2: \" + feedback);\n      console.log(\"inputArr: \" + inputArr)\n      console.log(\"randomArr: \" + randomArr)\n      for (let i = feedback.length; i < 4; i++) {\n        feedback.push(0);\n      }\n      //check if input is correct\n      if (\n        feedback.every((num) => {\n          return num == 2;\n        })\n      ) {\n        setDidWin(true);\n        //alert(\"you won!\")\n        if(alert('You Won!')){}\n        else window.location.reload();   \n        return\n      }\n      //increment row number\n      setRowsNum((prevCount) => {\n        return prevCount + 1;\n      });\n\n      //2. Update the grid\n      setRows([\n        ...rows,\n        { row: rowsNum, nums: rowArray, check: feedback.sort().reverse() },\n      ]);\n    }\n  };\n\n  return (\n    <section>\n      <h2>MasterMind Game</h2>\n      <div className={classes.game}>\n        {<p>{turnsLeft} turns remaining</p>}\n        <div className={classes.guessGrid}>\n          {rows.map((row) => {\n            return (\n              <DisplayRow\n                key={row.row}\n                values={row.nums}\n                feedback={row.check}\n              />\n            );\n          })}\n        </div>\n        <InputRow rowId=\"1\" checkRow={checkRow} level={diff}/>\n      </div>\n    </section>\n  );\n};\n\nexport default MasterMindGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}