{"ast":null,"code":"var _jsxFileName = \"/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MasterMindGame = () => {\n  _s();\n\n  const [randomNums, setRandomNums] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  const [turnsLeft, setTurnsLeft] = useState(10);\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    fetch(\"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\").then(res => {\n      return res.text();\n    }).then(data => {\n      console.log(data);\n      var array = data.split(\"\\n\");\n      array.pop();\n      array.map(num => {\n        return parseInt(num);\n      });\n      setRandomNums(array);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  const checkRow = event => {\n    event.preventDefault();\n\n    if (turnsLeft < 1) {\n      alert(\"Game Over. Better Luck next time\");\n    }\n\n    setTurnsLeft(turnsLeft - 1);\n    var rowArray = [];\n\n    for (let i = 0; i < event.target.length; i++) {\n      rowArray.push(parseInt(event.target[i].value));\n    }\n\n    rowArray.pop();\n    var inputArr = rowArray.map(str => {\n      return parseInt(str);\n    });\n    var randomArr = [...randomNums];\n    var feedback = [];\n\n    const deleteNumFromSets = num => {\n      let a = randomArr.indexOf(num);\n      let b = inputArr.indexOf(num);\n      randomArr.splice(a, 1);\n      inputArr.splice(b, 1);\n    }; //1. check if numbers are correct and aligned\n\n\n    for (let i = 0; i < randomNums.length; i++) {\n      if (rowArray[i] == randomNums[i]) {\n        feedback.push(2);\n        deleteNumFromSets(rowArray[i]);\n      }\n    } //2. check if any remaining inputs nums are in the random set\n\n\n    inputArr.forEach(num => {\n      if (randomArr.includes(num)) {\n        feedback.push(1);\n        randomArr.splice(randomArr.indexOf(num), 1);\n      }\n    });\n    console.log(\"feedback after 2: \" + feedback);\n\n    for (let i = feedback.length; i < 4; i++) {\n      feedback.push(0);\n    } //check if input is correct\n\n\n    if (feedback.every(num => {\n      return num == 2;\n    })) {\n      setDidWin(true);\n    } //increment row number\n\n\n    setRowsNum(prevCount => {\n      return prevCount + 1;\n    }); //2. Update the grid\n\n    setRows([...rows, {\n      row: rowsNum,\n      nums: rowArray,\n      check: feedback.sort().reverse()\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MasterMind Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.game,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [turnsLeft, \" turns remaining\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.guessGrid,\n        children: rows.map(row => {\n          return /*#__PURE__*/_jsxDEV(DisplayRow, {\n            values: row.nums,\n            feedback: row.check\n          }, row.row, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputRow, {\n        rowId: \"1\",\n        checkRow: checkRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), didWin && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"you won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MasterMindGame, \"DSOm+GoqtWF+xG36rnA+Krsae9k=\");\n\n_c = MasterMindGame;\nexport default MasterMindGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MasterMindGame\");","map":{"version":3,"names":["useState","useEffect","classes","InputRow","DisplayRow","MasterMindGame","randomNums","setRandomNums","rows","setRows","rowsNum","setRowsNum","didWin","setDidWin","turnsLeft","setTurnsLeft","fetch","then","res","text","data","console","log","array","split","pop","map","num","parseInt","catch","error","checkRow","event","preventDefault","alert","rowArray","i","target","length","push","value","inputArr","str","randomArr","feedback","deleteNumFromSets","a","indexOf","b","splice","forEach","includes","every","prevCount","row","nums","check","sort","reverse","game","guessGrid"],"sources":["/Users/bingliang/dev/mastermind_game/client/src/components/MastermindGame.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport classes from \"./MastermindGame.module.css\";\nimport InputRow from \"./InputRow\";\nimport DisplayRow from \"./DisplayRow\";\n\nconst MasterMindGame = () => {\n  const [randomNums, setRandomNums] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [rowsNum, setRowsNum] = useState(0);\n  const [didWin, setDidWin] = useState(false);\n  const [turnsLeft, setTurnsLeft] = useState(10);\n\n  useEffect(() => {\n    // //1. retrieve random numbers from api\n    fetch(\n      \"https://www.random.org/integers/?num=4&min=0&max=7&col=1&base=10&format=plain&rnd=new\"\n    )\n      .then((res) => {\n        return res.text();\n      })\n      .then((data) => {\n        console.log(data);\n        var array = data.split(\"\\n\");\n        array.pop();\n        array.map((num) => {\n          return parseInt(num);\n        });\n        setRandomNums(array);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const checkRow = (event) => {\n     event.preventDefault();\n    if (turnsLeft < 1) {\n        alert(\"Game Over. Better Luck next time\");\n    }\n    setTurnsLeft(turnsLeft - 1);\n    var rowArray = [];\n    for (let i = 0; i < event.target.length; i++) {\n        rowArray.push(parseInt(event.target[i].value));\n    }\n\n    rowArray.pop();\n    var inputArr = rowArray.map((str) => { return parseInt(str)});\n    var randomArr = [...randomNums];\n\n    var feedback = [];\n\n    const deleteNumFromSets = (num) => {\n        let a = randomArr.indexOf(num);\n        let b = inputArr.indexOf(num);\n      randomArr.splice(a, 1);\n      inputArr.splice(b, 1);\n    };\n\n    //1. check if numbers are correct and aligned\n    for (let i = 0; i < randomNums.length; i++) {\n      if (rowArray[i] == randomNums[i]) {\n        feedback.push(2);\n        deleteNumFromSets(rowArray[i]);\n      }\n    }\n    \n    //2. check if any remaining inputs nums are in the random set\n    inputArr.forEach((num) => {\n      if (randomArr.includes(num)) {  \n        feedback.push(1);\n        randomArr.splice(randomArr.indexOf(num), 1);\n      }\n    });\n\n    console.log(\"feedback after 2: \" + feedback);\n    for (let i = feedback.length; i < 4; i++) {\n      feedback.push(0);\n    }\n    //check if input is correct\n    if (\n      feedback.every((num) => {\n        return num == 2;\n      })\n    ) {\n      setDidWin(true);\n    }\n    //increment row number\n    setRowsNum((prevCount) => {\n      return prevCount + 1;\n    });\n\n    //2. Update the grid\n    setRows([\n      ...rows,\n      { row: rowsNum, nums: rowArray, check: feedback.sort().reverse() },\n    ]);\n  };\n\n  return (\n    <section>\n        \n      <h2>MasterMind Game</h2>\n      <div className={classes.game}>\n      {<p>{turnsLeft} turns remaining</p>}\n        <div className={classes.guessGrid}>\n          {rows.map((row) => {\n            return (\n              <DisplayRow\n                key={row.row}\n                values={row.nums}\n                feedback={row.check}\n              />\n            );\n          })}\n        </div>\n        <InputRow rowId=\"1\" checkRow={checkRow} />\n        \n        {didWin && <p>you won!</p>}\n      </div>\n    </section>\n  );\n};\n\nexport default MasterMindGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}